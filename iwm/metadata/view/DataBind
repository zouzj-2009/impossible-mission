{
    "id": "ExtBox1-ext-gen10116",
    "type": "container",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "hidden": false,
        "width": null,
        "designer|userClassName": "DataBind",
        "designer|userAlias": "databind",
        "databind": null
    },
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "databind",
            "type": "array"
        }
    ],
    "designerId": "49498605-3383-4224-98a8-672ea0a3423e",
    "$viewOrder": 16,
    "expanded": false,
    "cn": [
        {
            "id": "ExtBox1-ext-gen12311",
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onContainerAfterRender",
                "implHandler": [
                    "var me = this, c = this.ownerCt;",
                    "if (!c) return;",
                    "//todo: get serverip from document.location?",
                    "var ccfg = Ext.apply({serverip:c.serverip, databind:me.databind}, c.getInitialConfig()),",
                    "    serverip = ccfg.serverip,",
                    "    dbconfig = c.databind?c.databind:ccfg.databind;",
                    "//dbconfig is an array like, usually inited in this component, can be override by 'c'",
                    "//[{itemid: 'mygrid', url: '/model/get.php', host:'localhost', port: 8080}]",
                    "//subconfig progress:{text|newin|bar,maskid,id|itemid(#processstatus default)}",
                    "",
                    "if (!dbconfig) return;",
                    "function updateProgressComponent(cfg, response, operation){",
                    "    //todo: lazy dispear progress",
                    "    //todo: mask the action component",
                    "    var pcfg = cfg.pcfg,",
                    "        domask = !pcfg || !pcfg.noMask || cfg.maskid,",
                    "        pend = response?(!response.pending): true,",
                    "        title = response&&response.pending?response.pending.title:Ext.String.capitalize(operation.action+' '+cfg.storeid),",
                    "        msg = response&&response.pending?response.pending.msg:'Please waiting ...',    ",
                    "        number = response&&response.pending?response.pending.number:(operation.seq/(operation.seqmax?operation.seqmax:10)),",
                    "        pendingtext = response&&response.pending?response.pending.text:title+' '+Ext.util.Format.number(number, '0.00')+'%',",
                    "        donetext = response&&response.msg?response.msg:title+' done.',",
                    "        pc = null;",
                    "    if (pcfg && pcfg.id) pc = Ext.getCmp(pcfg.id);",
                    "    else if (pcfg && pcfg.itemid) pc = c.down('#'+pcfg.itemid);",
                    "    else if (pcfg && pcfg.newin){",
                    "        if (!pend && !pcfg.msgwin){",
                    "            //create new win",
                    "            pcfg.msgwin = Ext.Msg.progress(title, msg, pendingtext);",
                    "            if (pcfg.msgwin.minWidth < 400){",
                    "                Ext.getClass(pcfg.msgwin).prototype.minWidth = 400;",
                    "                pcfg.msgwin.setWidth(400);",
                    "            }",
                    "        }else{",
                    "            if (pend && pcfg.msgwin){",
                    "                if (response && response.success){",
                    "                    pcfg.msgwin.updateProgress(1, 'Complete(100%)', donetext);",
                    "                    Ext.defer(pcfg.msgwin.close, 1000, pcfg.msgwin);",
                    "                    pcfg.msgwin = null;",
                    "                }else{//todo, msg prompt box!",
                    "                    pcfg.msgwin.close();",
                    "                    pcfg.msgwin = null;",
                    "                    Exg.Msg.alert(title, donetext);",
                    "                }",
                    "            }else if (pcfg.msgwin){",
                    "                pcfg.msgwin.updateProgress(number, pendingtext, msg);",
                    "            }",
                    "        }",
                    "        return;",
                    "    }else{",
                    "        pc = c.down('#processstatus');",
                    "        if (!pc) pc = Ext.getCmp('processstatus');",
                    "    }",
                    "    if (domask){//do mask",
                    "        if (pend && cfg.mask){",
                    "            cfg.mask.hide(c).destroy();",
                    "            cfg.mask = null;",
                    "        }else if (!pend && !cfg.mask){",
                    "            var mask = cfg.maskid?c.down('#'+cfg.maskid):c;",
                    "            if (!mask) mask = c;",
                    "            cfg.mask = new Ext.LoadMask(mask, {msg:title+' ...'});",
                    "            cfg.mask.show(mask);",
                    "        }",
                    "    }",
                    "    if (pcfg && pcfg.text){",
                    "        //todo: class of this text, ",
                    "        if (pend){",
                    "            pc.getEl().setHTML('<a class=\"x-progress-text\">'+donetext+'</a>');",
                    "            Ext.defer(pc.getEl().setHTML(''), 1000, pc.getEl(), ['']);",
                    "        }else{",
                    "            pc.getEl().setHTML('<a class=\"x-progress-text\">'+pendingtext+'</a>');",
                    "        }",
                    "    }else{",
                    "        var ppc = pc.down('progressbar');",
                    "        if (!ppc && !pend){",
                    "            ppc = Ext.create('Ext.ProgressBar',{});",
                    "            pc.add(ppc);",
                    "        }",
                    "        if (pend && ppc){",
                    "            ppc.updateProgress(1, donetext, true);",
                    "            if (response && response.success){",
                    "                Ext.defer(pc.remove, 1000, pc, [ppc, true]);",
                    "            }else{",
                    "                ppc.getEl().on('click', function(){",
                    "                    Ext.Msg.alert(title, donetext, function(){",
                    "                        Ext.defer(pc.remove, 1000, pc, [ppc, true]);",
                    "                    });",
                    "                });",
                    "            }",
                    "        }else if (ppc) {",
                    "            ppc.updateProgress(number, pendingtext, true);",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "function encodeRecords(records){",
                    "    var i=0, data=[];",
                    "    for(;i<records.length; i++) data.push(records[i].getData());",
                    "    return Ext.encode(data);",
                    "}",
                    "",
                    "function processLoad(store, records, successful, options){",
                    "    if (!successful) return true;//updated by proxyErrors",
                    "    updateProgressComponent(options, {success:successful}, {action:'read', seq:10, seqmax:10});",
                    "}",
                    "",
                    "function processWrite(store, operation, options){",
                    "    //todo: process final pending write here!",
                    "    if(!operation.wasSuccessful()) alert('write fail!');",
                    "    updateProgressComponent(options, operation.response, operation);",
                    "}",
                    "",
                    "function createRequestCallback(request, operation, callback, scope) {",
                    "    var lme = this;",
                    "    operation.origincallback = callback;",
                    "    operation.originscope = scope;",
                    "    return function(success, response, errorType) {",
                    "        delete lme.lastRequest;",
                    "        lme.processResponse(success, operation, request, response, callback, scope);",
                    "    };",
                    "}",
                    "",
                    "function doProxyDestroy(){",
                    "    var lme = this;",
                    "    return lme.doRequest.apply(lme, arguments);",
                    "}",
                    "",
                    "function proxyErrors(proxy, response, operation, options){",
                    "    if (!response){",
                    "        //todo:when batch op,say create/destroy if create fail, ...",
                    "        alert('Fatal error, operation.'+operation.action+' no response! error:'+operation.error);",
                    "        //todo: try to continue when first op in batch fail at 'callbackxxx not found'",
                    "        updateProgressComponent(options, {success:false, msg:'proxy '+operation.error}, operation);",
                    "        return;",
                    "    }",
                    "    try{",
                    "        //todo: interactive C/S",
                    "        if (response.pending){",
                    "            updateProgressComponent(options, response, operation);",
                    "            Ext.applyIf(operation, {params:{}, seq:0});",
                    "            Ext.apply(operation.params, {seqid: ++operation.seq});",
                    "            proxy.doRequest(operation, operation.origincallback, operation.originscope);",
                    "        }else{//fail",
                    "            updateProgressComponent(options, response, operation);",
                    "            //how about update/destroy?",
                    "            //todo: check more, phantom or sth. else?",
                    "            //maybe problem is phantom when add(v);",
                    "            //if (operation.action == 'create') options.store.remove(operation.records);",
                    "            /* can't just simple add fail destroied records",
                    "            if (operation.action == 'destroy') ",
                    "            options.store.add(operation.records);",
                    "            */",
                    "        }",
                    "    }catch(e){",
                    "        alert(e);",
                    "    }",
                    "}",
                    "",
                    "for(var i=0;i<dbconfig.length;i++){",
                    "    var cfg = dbconfig[i],",
                    "        dbc = c.down('#'+cfg.itemid);",
                    "    if (!dbc){",
                    "        console.log('bind item '+cfg.itemid+' not found!');",
                    "        continue;",
                    "    }",
                    "    var store = Ext.isFunction(dbc.getStore)?dbc.getStore(dbc):dbc.store;",
                    "    if (!store) {",
                    "        console.log('not store for item '+cfg.itemid+' config:'+cfg);",
                    "        continue;",
                    "    }",
                    "    if (cfg.store){//just replace with old",
                    "        if (Ext.isFunction(dbc.bindStore)){",
                    "            dbc.bindStore(cfg.store);",
                    "        }else dbc.store = cfg.store;",
                    "        if (cfg.keepproxy) continue; //or replact proxy indeed?",
                    "    }",
                    "    var proxy = store.getProxy();",
                    "",
                    "    cfg = Ext.applyIf(cfg,{",
                    "        proto: 'http',",
                    "        host: serverip?serverip:'localhost',",
                    "        port: '80',",
                    "        url: 'models/get.php?mid='+store.storeId,",
                    "        pcfg: cfg.progress?cfg.progress:dbconfig.progress,",
                    "        storeid: store.storeId,",
                    "        store: store",
                    "    });",
                    "",
                    "    var reader = null, writer=null,",
                    "        url = cfg.proto+'://'+cfg.host+':'+cfg.port+'/'+cfg.url;",
                    "    if (proxy && cfg.keepreader) reader = proxy.getReader();",
                    "    if (proxy && cfg.keepwriter) writer = proxy.getWriter();",
                    "    if (!reader) reader = {type:'json', root:'data'};",
                    "    if (!writer && !cfg.rdonly) writer = {type:'json', root:'data', writeAllFields:false, allowSingle:false};",
                    "",
                    "    var api={read:url+'&_act=read'};",
                    "    if (!cfg.rdonly){",
                    "        api.create = url+'&_act=create';",
                    "        api.update = url+'&_act=update';",
                    "        api.destroy = url+'&_act=destroy';",
                    "    }",
                    "    store.on('write', processWrite, dbc, cfg);",
                    "    store.on('load', processLoad, dbc, cfg);",
                    "    //don't use this, will skip fire 'write' event(suspend)",
                    "    //if you wan't to use this, need add callback on operation!",
                    "    //store.batchUpdateMode = 'complete';",
                    "    store.setProxy({",
                    "        type: 'jsonp',",
                    "        timeout: 300000,",
                    "        //batchActions: false,",
                    "        api: cfg.api?cfg.api:api,",
                    "        url: cfg.proto+'://'+cfg.host+':'+cfg.port+'/'+cfg.url,",
                    "        reader: cfg.reader?cfg.reader:reader,",
                    "        encodeRecords: encodeRecords,",
                    "        //we need the input callback/scope to saved in reqeuest, so overwrite!",
                    "        createRequestCallback: createRequestCallback,",
                    "        destroy: doProxyDestroy,",
                    "        writer: cfg.writer?cfg.writer:writer",
                    "    });",
                    "    store.getProxy().on('exception', proxyErrors, dbc, cfg);",
                    "    if (store.autoLoad||cfg.autoLoad)",
                    "    store.load(cfg.loadParams?{params:cfg.loadParams}:{});",
                    "}",
                    ""
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|userClassName": "onContainerAfterRender"
            },
            "customConfigs": [],
            "expanded": true
        }
    ]
}