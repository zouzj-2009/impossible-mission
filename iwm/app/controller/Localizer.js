/*
 * File: app/controller/Localizer.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Localizer', {
    extend: 'Ext.app.Controller',

    unlocalized: {
        
    },

    onButtonBeforeRender: function(abstractcomponent, options) {
        var c = abstractcomponent,
            t = c.getText(),
            tx = t?t.replace(/\$$/, ''):'__x',
            lt = App.locale.text[tx];
        //if button has itemId, we check it.
        //if button text has $ ended, we check it.
        if ((c.itemId || (tx != t))){
            if (lt) c.setText(lt);
            else {
                if (t) c.setText(tx);
                this.unlocalized[tx] = '';
            }
        }

        t = c.confirmation;
        if (t){
            //end with $ will be localized
            tx = t.replace(/\$$/, '');
            if (t != tx){
                lt = App.locale.text[tx];
                if (lt) c.confirmation = lt;
                else {
                    c.confirmation = tx;
                    this.unlocalized[tx] = '';
                }
            }
        }

        t = c.confirmtitle;
        if (t){
            //end with $ will be localized
            tx = t.replace(/\$$/, '');
            if (t != tx){
                lt = App.locale.text[tx];
                if (lt) c.confirmtitle = lt;
                else {
                    c.confirmtitle = tx;
                    this.unlocalized[tx] = '';
                }
            }
        }
    },

    onFieldsetBeforeRender: function(abstractcomponent, options) {
        var c = abstractcomponent,
            t = c.title,
            tx = t?t.replace(/\$$/, ''):'__x',
            lt = App.locale.text[tx];
        //if button has itemId, we check it.
        //if button text has $ ended, we check it.
        if (lt) c.setTitle(lt);
        else {
            if (t) c.setTitle(tx);
            this.unlocalized[tx] = '';
        }
    },

    onPanelBeforeRender: function(abstractcomponent, options) {
        var c = abstractcomponent,
            t = c.title,
            tx = t?t.replace(/\$$/, ''):'__x',
            lt = App.locale.text[tx];
        //if button has itemId, we check it.
        //if button text has $ ended, we check it.
        if (lt) c.setTitle(lt);
        else{
            if(t) c.setTitle(tx);
            this.unlocalized[tx] = '';
        }
    },

    onGridpanelBeforeRender: function(abstractcomponent, options) {
        //for each column, check text 
        var c = abstractcomponent,
            me = this,
            columns = c.columns;
        if(!Ext.isArray(columns)) return;
        for(var i=0;i<columns.length;i++){
            var t = columns[i].text,
                lt = t?App.locale.text[t]:null;
            if (lt) columns[i].setText(lt);
            else{
                me.unlocalized[t] = '';
            }
        }
    },

    onFormBeforeRender: function(abstractcomponent, options) {
        //for each field, check label, invalid text ...
        var c = abstractcomponent,
            me = this,
            fields = c.getForm().getFields();

        fields.each(function(){
            //label
            var t = this.getFieldLabel(),
                tx = t?t.replace(/\$$/, ''):'__x',
                lt = App.locale.text[tx];
            if (t!=tx){
                if (lt) this.setFieldLabel(lt);
                else{
                    this.setFieldLabel(tx);
                    me.unlocalized[tx] = '';
                }
            }
            //invalid text!
            t = this.invalidText;
            tx = t?t.replace(/\$$/, ''):'__x';
            lt = App.locale.text[tx];
            if (t!=tx){
                if (lt) this.invalidText = lt;
                else{
                    this.invalidText = tx;
                    me.unlocalized[tx] = '';
                }
            }
        });
    },

    onSliderBeforeRender: function(abstractcomponent, options) {
        var c = abstractcomponent,
            t = c.getFieldLabel(),
            tx = t?t.replace(/\$$/, ''):'__x',
            lt = App.locale.text[tx];
        if (t!=tx){
            if (lt) c.setFieldLabel(lt);
            else{
                c.setFieldLabel(tx);
                this.unlocalized[tx] = '';
            }
        }
    },

    init: function(application) {
        this.control({
            "button": {
                beforerender: this.onButtonBeforeRender
            },
            "fieldset": {
                beforerender: this.onFieldsetBeforeRender
            },
            "panel": {
                beforerender: this.onPanelBeforeRender
            },
            "gridpanel": {
                beforerender: this.onGridpanelBeforeRender
            },
            "form": {
                beforerender: this.onFormBeforeRender
            },
            "slider": {
                beforerender: this.onSliderBeforeRender
            }
        });
        //todo: load proper lang setting js here
    },

    onControllerBeforeRenderStub: function() {

    }

});
