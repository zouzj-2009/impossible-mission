/*
 * File: app/view/DiskMgmt.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.DiskMgmt', {
    extend: 'Ext.form.Panel',
    alias: 'widget.diskmgmt',

    layout: {
        type: 'border'
    },
    bodyPadding: 10,
    title: 'Disk Management$',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    hideCollapseTool: false,
                    overlapHeader: false,
                    preventHeader: false,
                    title: 'Current Setting',
                    titleCollapse: false,
                    store: 'DiskList',
                    region: 'center',
                    split: true,
                    viewConfig: {

                    },
                    selModel: Ext.create('Ext.selection.CheckboxModel', {

                    }),
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    itemId: 'delete',
                                    text: 'Delete',
                                    listeners: {
                                        click: {
                                            fn: me.onDeleteClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'refresh',
                                    text: 'Refresh',
                                    listeners: {
                                        click: {
                                            fn: me.onRefreshClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        selectionchange: {
                            fn: me.onGridpanelSelectionChange,
                            scope: me
                        }
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'devname',
                            text: 'Devname'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'capacity',
                            text: 'Capacity'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'vendor',
                            text: 'Vendor'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'product',
                            text: 'Product'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'revision',
                            text: 'Revision'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'hostid',
                            text: 'Hostid'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'hostdesc',
                            text: 'Hostdesc'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'transmode',
                            text: 'Transmode'
                        }
                    ]
                },
                {
                    xtype: 'container',
                    minWidth: 280,
                    width: 150,
                    autoScroll: true,
                    region: 'west',
                    split: true,
                    items: [
                        {
                            xtype: 'fieldset',
                            title: 'HBA setting',
                            items: [
                                {
                                    xtype: 'combobox',
                                    name: 'hostid',
                                    fieldLabel: 'Disk Channel',
                                    displayField: 'hostdesc',
                                    queryMode: 'local',
                                    store: 'HbaList',
                                    valueField: 'hostid'
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'rescan',
                                    text: 'Rescan ...',
                                    listeners: {
                                        click: {
                                            fn: me.onRescanClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onDeleteClick: function(button, e, options) {
        var records = this.down('gridpanel').getSelectionModel().getSelection();
        this.down('gridpanel').store.remove(records);
    },

    onRefreshClick: function(button, e, options) {
        this.reloaded = true;
        this.down('gridpanel').store.load();
    },

    onGridpanelSelectionChange: function(tablepanel, selections, options) {
        if (selections.length==1){
            this.loadRecord(selections[0]);
            this.down('#delete').enable();
        }else{
            this.down('#delete').disable();
        }


    },

    onRescanClick: function(button, e, options) {

    }

});