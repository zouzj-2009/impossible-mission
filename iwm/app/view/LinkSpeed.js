/*
 * File: app/view/LinkSpeed.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.LinkSpeed', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.linkspeed',

    layout: {
        type: 'border'
    },
    title: 'Network Bandwidth Monitor$',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    region: 'center',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'slider',
                            width: 400,
                            name: 'interval',
                            value: 5,
                            fieldLabel: 'Sample Rate$',
                            maxValue: 60,
                            minValue: 2
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'radiogroup',
                            width: 240,
                            labelWidth: 80,
                            items: [
                                {
                                    xtype: 'radiofield',
                                    name: 'montype',
                                    value: 'received',
                                    boxLabel: 'Received',
                                    inputValue: 'received'
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'montype',
                                    value: 'send',
                                    boxLabel: 'Sent',
                                    checked: false,
                                    inputValue: 'sent'
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'montype',
                                    value: 'both',
                                    boxLabel: 'Both',
                                    checked: true,
                                    inputValue: 'both'
                                }
                            ]
                        },
                        {
                            xtype: 'cycle',
                            enableToggle: true,
                            showText: true,
                            menu: {
                                xtype: 'menu',
                                width: 120,
                                items: [
                                    {
                                        xtype: 'menucheckitem',
                                        itemId: 'start',
                                        text: 'Start Monitor',
                                        checked: true
                                    },
                                    {
                                        xtype: 'menucheckitem',
                                        itemId: 'stop',
                                        text: 'Stop Monitor',
                                        checked: false
                                    }
                                ]
                            },
                            listeners: {
                                change: {
                                    fn: me.onCyclebuttonChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'chart',
                    insetPadding: 20,
                    store: 'LinkSpeed',
                    region: 'center',
                    axes: [
                        {
                            type: 'Numeric',
                            grid: true,
                            position: 'left',
                            title: 'Speed (KB/s)',
                            adjustMaximumByMajorUnit: true
                        },
                        {
                            type: 'Category',
                            fields: [
                                'etime'
                            ],
                            position: 'bottom',
                            title: 'Elapsed time(seconds)'
                        }
                    ],
                    series: [
                        {
                            type: 'line',
                            title: 'eth0',
                            axis: 'bottom',
                            xField: 'etime',
                            yField: [
                                'eth0'
                            ],
                            fill: false
                        },
                        {
                            type: 'line',
                            title: 'eth1',
                            axis: 'bottom',
                            xField: 'etime',
                            yField: [
                                'eth1'
                            ],
                            fill: false
                        },
                        {
                            type: 'line',
                            title: 'eth2',
                            axis: 'bottom',
                            xField: 'etime',
                            yField: [
                                'eth2'
                            ],
                            fill: false
                        },
                        {
                            type: 'line',
                            title: 'eth3',
                            axis: 'bottom',
                            xField: 'etime',
                            yField: [
                                'eth3'
                            ],
                            fill: false
                        }
                    ],
                    legend: {

                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onCyclebuttonChange: function(cycle, item, options) {
        var chart = this.down('chart'),
            me = this,
            montype = me.down('toolbar radiogroup').getValue().montype,
            interval = me.down('slider').getValue();
        if (item.getItemId() == 'start'){
            if (me.intr) clearInterval(me.intr);
            me.intr = null;
        }else if (item.getItemId() == 'stop'){
            if (!me.iStore){
                me.iStore = chart.store;
                me.etimelast = 0;
                me.idata = [];
                me.iStore.load(function(records, oprate, result){
                    //use origin designed series
                    if (!result) return;
                    var data = {etime: 0},
                        idata = {etime: 0},
                        series = [],
                        ct = chart.ownerCt,
                        fields =['etime'];
                    for(var i=0; i<records.length; i++){
                        var rec = records[i].data;
                        switch(montype){
                            case 'sent':
                            data[rec.devname] = rec.send;
                            break;
                            case 'received':
                            data[rec.devname] = rec.recv;
                            break;
                            default:
                            data[rec.devname] = rec.total;
                        }
                        data[rec.devname] = rec.total;
                        idata[rec.devname] = 1;
                        fields.push(rec.devname);
                        series.push({
                            type: 'line',
                            title: rec.devname,
                            axis: 'bottom',
                            xField: 'etime',
                            yField: [
                            rec.devname
                            ],
                            fill: false
                        });
                    }
                    var store = Ext.create('Ext.data.JsonStore', {
                        fields: fields,
                        data: [{etime:0}]
                    });
                    var newchart = Ext.create('Ext.chart.Chart', {
                        insetPadding: 20,
                        store: store,
                        region: 'center',
                        axes: [
                        {
                            type: 'Numeric',
                            grid: true,
                            position: 'left',
                            title: 'Speed (KB/s)',
                            adjustMaximumByMajorUnit: true
                        },
                        {
                            type: 'Category',
                            fields: [
                            'etime'
                            ],
                            label: {
                                rotate: {
                                    degrees: 270
                                }
                            },
                            position: 'bottom',
                            title: 'Elapsed time  (seconds)'
                        }
                        ],
                        series: series,
                        legend: {}
                    });
                    ct.remove(chart);
                    ct.add(newchart);
                    me.store = newchart.store;
                    me.lastdata = data;
                });
            }

            var store = me.store?me.store:chart.store;

            //strange, down('chart') will get old one!
            if (!me.intr){
                store.removeAll();
                me.etimelast = 0;
                me.idata = [];
                me.lastdata = null;
                me.intr = setInterval(function(){
                    me.iStore.load(function(records, oprate, result){
                        var data = {etime: me.etimelast},
                            idata = {etime: me.etimelast},
                            lastdata = me.lastdata;
                        for(var i=0; i<records.length; i++){
                            var rec = records[i].data,
                                newtotal = 0,
                                oldtotal = lastdata?lastdata[rec.devname]:null;
                            switch(montype){
                                case 'sent':
                                newtotal = rec.send;
                                break;
                                case 'received':
                                newtotal = rec.recv;
                                break;
                                default:
                                newtotal = rec.total;
                            }
                            data[rec.devname] = newtotal;
                            if (!lastdata) continue;
                            idata[rec.devname] = (newtotal>oldtotal?newtotal-oldtotal:oldtotal-newtotal)/interval/1024;
                        }
                        me.etimelast += interval;
                        me.lastdata = data;
                        if (!lastdata) return;
                        me.idata.push(idata);
                        if (me.idata.length >60) me.idata.shift();
                        var store = me.store?me.store:chart.store;
                        store.loadData(me.idata);
                    });
                }, interval*1000);   
            }    
        }
    }

});