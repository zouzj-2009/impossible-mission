/*
 * File: app/view/LinkSpeedBar.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('net_utils.view.LinkSpeedBar', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.linkspeedbar',

    layout: {
        type: 'border'
    },
    title: 'Network Bandwidth Monitor$',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    region: 'center',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'slider',
                            width: 400,
                            name: 'interval',
                            value: 5,
                            fieldLabel: 'Sample Rate$',
                            maxValue: 60,
                            minValue: 2
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'cycle',
                            enableToggle: true,
                            showText: true,
                            menu: {
                                xtype: 'menu',
                                width: 120,
                                items: [
                                    {
                                        xtype: 'menucheckitem',
                                        itemId: 'start',
                                        iconCls: 'x-btn-tool-start',
                                        text: 'Start Monitor$',
                                        checked: true
                                    },
                                    {
                                        xtype: 'menucheckitem',
                                        itemId: 'stop',
                                        iconCls: 'x-btn-tool-stop',
                                        text: 'Stop Monitor$',
                                        checked: false
                                    }
                                ]
                            },
                            listeners: {
                                change: {
                                    fn: me.onCyclebuttonChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'x-btn-tool-export',
                            text: 'Export ...$',
                            confirmation: 'Would you like to download the chart as an image?<br/>Warning! This is a cloud service, Data will be sent to website:sencha.io)',
                            confirmtitle: 'Download Confirm$',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'chart',
                    background: {
                        fill: '#ccc'
                    },
                    insetPadding: 20,
                    store: 'net_utils.store.LinkSpeed',
                    region: 'center',
                    axes: [
                        {
                            type: 'Numeric',
                            fields: [
                                'total'
                            ],
                            grid: true,
                            position: 'bottom',
                            title: 'Speed (KB/s)',
                            adjustMaximumByMajorUnit: true
                        },
                        {
                            type: 'Category',
                            fields: [
                                'devname'
                            ],
                            position: 'left',
                            title: 'NIC'
                        }
                    ],
                    legend: {
                        position: 'left'
                    },
                    series: [
                        {
                            type: 'bar',
                            label: {
                                display: 'insideEnd',
                                field: [
                                    'total',
                                    'recv',
                                    'send'
                                ],
                                renderer: function(v){
                            return Ext.util.Format.fileSize(v*1024);
                            },
                                orientation: 'horizontal',
                                color: '#333',
                                'text-anchor': 'middle'
                            },
                            axis: 'bottom',
                            xField: 'devname',
                            yField: [
                                'total',
                                'recv',
                                'send'
                            ],
                            stacked: false
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onCyclebuttonChange: function(cycle, item, options) {
        var chart = this.down('chart'),
            me = this,
            interval = me.down('slider').getValue();
        if (item.getItemId() == 'start'){
            if (me.intr) clearInterval(me.intr);
            me.intr = null;
            if (me.mask) me.mask.hide().destroy();
            me.mask = null;
        }else if (item.getItemId() == 'stop'){
            if (!me.intr){
                me.idata = [];
                me.lastdata = null;
                me.xstore = chart.store;
                me.mask = new Ext.LoadMask(chart, 'please wait for a while ...');
                me.mask.show();
                me.loadcount = 0;
                me.intr = setInterval(function(){
                    me.xstore.load(
                    function(records, oprate, result){
                        var data = [],
                            idata = {data:[]};
                        if (!result) return;
                        for(var i=0; i<records.length; i++){
                            var rec = records[i].data,
                                last = me.lastdata?me.lastdata[rec.devname]:null;
                            data[rec.devname]={total:rec.total, send: rec.send, recv: rec.recv};
                            if (last)
                            idata.data.push({
                                devname: rec.devname,
                                total: (last.total>rec.total?last.total-rec.total:rec.total-last.total)/interval/1024,
                                recv: (last.recv>rec.recv?last.recv-rec.recv:rec.recv-last.recv)/interval/1024,
                                send: (last.send>rec.send?last.send-rec.send:rec.send-last.send)/interval/1024
                            });
                        }
                        me.lastdata = data;
                        if (idata.data.length) me.xstore.loadData(idata.data);
                        else me.xstore.removeAll();
                        me.loadcount ++;
                        if (me.mask && me.loadcount>1){
                            me.mask.hide().destroy();
                            me.mask = null;
                        }
                    });
                }, interval*1000);   
            }    
        }
    },

    onButtonClick: function(button, e, options) {
        Ext.MessageBox.confirm(button.confirmtitle, button.confirmation, function(choice){
            if(choice == 'yes'){
                button.up('panel').down('chart').save({
                    type: 'image/png'
                });
            }
        });
    }

});